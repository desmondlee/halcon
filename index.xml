<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>图像处理 on Halcon学习</title>
    <link>http://halcon.lizhenguo.cn/</link>
    <description>Recent content in 图像处理 on Halcon学习</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://halcon.lizhenguo.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基础算子(方法函数)</title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%9F%BA%E7%A1%80%E7%AE%97%E5%AD%90%E6%96%B9%E6%B3%95%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%9F%BA%E7%A1%80%E7%AE%97%E5%AD%90%E6%96%B9%E6%B3%95%E5%87%BD%E6%95%B0/</guid>
      <description>基础算子(方法函数) #  图片 #   read_image write_image dump_window dump_window_image draw_rectangle   draw 和 gen 的区别：
 draw 产生的是点位信息， 是控制类型变量， 方便存储和读写； gen 产生的是图像， 是图像类型变量， 用于显示图形； draw 一般和 gen 联合使用，显示绘制的区域。   数组 #   tuple_concat tuple_find tuple_regexp_select  资源句柄 #   dev_get_window  区域计算 #   union1&amp;amp;union2 difference intersection complement   解释，
 union1&amp;amp;union2，合并区域 difference，第一个区域减去其与第二个区域重合部分 intersection，两个区域的重合部分 complement，区域的补集(区域以外部分)   字体 #   query_font get_font set_font   解释,</description>
    </item>
    
    <item>
      <title>常用算子</title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90/</guid>
      <description>常用算子 #    get_region_xxx:获取区域点组
  get_contour_xld: 获取xld点组；
  area_center: 求区域面积
  intensity:
  shape_trans: 区域形状变换
  smallest_xxx: 求区域或xld的最小外接圆
  dyn_threshold, var_threshold ：使用局部均值和标准差分析分割图像
 dyn_threshold, var_threshold 常用于缺陷检测。
   read_image (Image, &#39;printer_chip/printer_chip_01&#39;)
 灰度线性变换   scale_image (Image, ImageScaled, 0.5, 0) scale_image_max (Image, ImageScaleMax)    直方图均衡化 equ_histo_image (Image, ImageEquHisto)
  图像反转 invert_image (Image, ImageInvert)
  图像旋转 rotate_image (Image, ImageRotate, 90, &amp;lsquo;constant&amp;rsquo;)</description>
    </item>
    
    <item>
      <title>read_image</title>
      <link>http://halcon.lizhenguo.cn/docs/image/operators/read_image/</link>
      <pubDate>Thu, 24 Dec 2020 22:59:03 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/operators/read_image/</guid>
      <description>read_image #  加载图像到halcon</description>
    </item>
    
    <item>
      <title>Halcon数据类型</title>
      <link>http://halcon.lizhenguo.cn/docs/csharp_combine/halcon%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/csharp_combine/halcon%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Halcon的数据类型 #  命名规范 #  Halcon导出的图像变量类型是HObject，简称 ho；导出的控制变量类型是HTuple，简称 hv。
图像类型的使用步骤 #   用GenEmptyObj初始化图像变量，或产生一个非空的图像变量； 在更新图像变量的内容前，用Dispose释放资源； 使用图像变量； 图像变量生命周期结束时，用Dispose释放资源。(C#中有GC垃圾回收机制，不强制Dispose；但C++中最好Dispose)   注：如果不及时用Dispose释放资源，可能会导致内存泄漏。
 C#与Halcon数据间转换 #    tuple变量赋值给C#变量：
csharp_int = halcon_int[0].I (英文字母i 的大写，表示int)csharp_real = halcon_real[0].D (英文字母d的大写，表示double)csharp_string = halcon_string[0].S (英文字母s的大写，表示string)  C#变量赋值给tuple变量：
halcon_int = csharp_int * 2; (隐式转换)halcon_int = (HTuple)(csharp_int * 2) (显示强制转换)halcon_int = new HTuple(csharp_int * 2)  </description>
    </item>
    
    <item>
      <title>hSmartWindow使用</title>
      <link>http://halcon.lizhenguo.cn/docs/csharp_combine/hsmartwindow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/csharp_combine/hsmartwindow/</guid>
      <description>hSmartWindow使用 #  提醒 #  若将halcon的dll文件拷贝到项目的bin/debug目录，需要同时拷贝以下三个文件，
halcon.dll, hcanvas.dll(在halcon安装目录bin下的x64-win64目录)
halcondotnet.dll(在halcon安装目录bin下的dotnet35目录)
原因 #  C#项目的bin/debug目录下有halcon.dll文件时，其优先级高于halcon在系统中的安装路径下的halcon.dll，
该halcon.dll会引用同目录的其他dll文件，若缺失，则会报错(提示缺失某dll)。
排查技巧 #   将halcon安装目录bin/x64-win64下的所有dll文件都拷贝到C#项目的bin/debug目录； 运行c#项目，使其能正常执行； 在c#项目运行状态下，删除C#项目的bin/debug目录下拷贝的所有dll文件，同时忽略无法删除部分； 最终剩下的无法删除的dll文件，即是可能需要的dll文件； 再一个个删除剩下的dll文件，运行目录下的exe文件，若报错，说明刚删除的dll文件是必要文件。  </description>
    </item>
    
    <item>
      <title>使用VisualStudio开发halcon的配置</title>
      <link>http://halcon.lizhenguo.cn/docs/csharp_combine/visualstudio%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/csharp_combine/visualstudio%E9%85%8D%E7%BD%AE/</guid>
      <description>使用VisualStudio开发halcon的配置 #  步骤 #   在项目属性中，生成代码 选项不勾选[首选32位]；※重要 在Form设计界面，打开工具箱， 右键选择选择项， 点击浏览，勾选halcon安装目录下的bin/dotnet35目录下的halcondotnet.dll文件；（此时可以在工具箱中拖拽使用hWindowControl控件了) 添加项目引用，选择halcondotnet.dll文件；（后缀是xl.dll的文件，用于大分辨率相机，如2000万像素以上） (可选项)，若想不依赖系统中的安装程序halcon，需要将相关dll文件放入c#项目的bin/debug目录下。(exe文件目录) (可选项)，Halcon安装目录下的misc目录中，有VS插件HALCON1911ProgressVariableInspect.vsix，双击安装后可以在VisualStudio中右键Halcon类型变量，添加到插件监控中。  实例 #  项目代码文件下载
 ps, vs版本为2017社区版
 切换版本 #   更换C#项目资源管理器，引用列表中的halcondotnet引用文件； 在工具箱、项目中，都重新引入最新的halcondotnet.dll动态库文件； 重新拖拽生成hWindowControl窗口控件。  快捷键 #    格式化代码
ctrl+k+f  </description>
    </item>
    
    <item>
      <title>常用设置</title>
      <link>http://halcon.lizhenguo.cn/docs/csharp_combine/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/csharp_combine/functions/</guid>
      <description>常用设置 #   设置内部图像处理buffer的宽度和高度  HoperatorSet.SetSystem(&amp;quot;width&amp;quot;, 512);HoperatorSet.SetSystem(&amp;quot;height&amp;quot;, 512);</description>
    </item>
    
    <item>
      <title>流程</title>
      <link>http://halcon.lizhenguo.cn/docs/image/procedure/</link>
      <pubDate>Thu, 24 Dec 2020 22:59:03 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/procedure/</guid>
      <description>流程 #   mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TDA[采集图像] -- B{有无判定, 如Blob分析,几何定位}B -- |有| C[获得位置,角度信息]B -- |无| AC -- D[仿射变换,如求变换句柄 , ROI变换]D -- E[图像预处理]E -- F[图像处理]F -- G[结果输出]</description>
    </item>
    
    <item>
      <title>常用标定</title>
      <link>http://halcon.lizhenguo.cn/docs/image/%E5%B8%B8%E7%94%A8%E6%A0%87%E5%AE%9A/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/%E5%B8%B8%E7%94%A8%E6%A0%87%E5%AE%9A/</guid>
      <description>常用标定 #   像素变换(原型、矩形、像素单量)； 透视投影及光学畸变校正； 不同坐标系之间的标定(三点确定一个坐标系)，如九点定标(机械手)； 多个相机通过标定统一到同一个坐标系。  </description>
    </item>
    
    <item>
      <title>连通性操作connection</title>
      <link>http://halcon.lizhenguo.cn/docs/image/operators/%E8%BF%9E%E9%80%9A%E6%80%A7%E6%93%8D%E4%BD%9Cconnection/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/operators/%E8%BF%9E%E9%80%9A%E6%80%A7%E6%93%8D%E4%BD%9Cconnection/</guid>
      <description>连通性操作connection #  作用 #  将整体目标拆分成多个独立目标。
前提 #  需要通过threshold标注出目标。
使用方式 #  命令connection (Regions, ConnectedRegions)。
其中，第一个参数 Regions是通过threshold得到的变量，第二个变量ConnectedRegions是connection算子的输出变量。
执行该命令后，包含在整张图像中的多个目标就被拆分成多个独立目标。(如果右键单击图像，彩色数量选择12，会发现每个独立的目标都被着上了不同的颜色)
参考图 #  </description>
    </item>
    
    <item>
      <title>特征直方图</title>
      <link>http://halcon.lizhenguo.cn/docs/image/operators/%E7%89%B9%E5%BE%81%E7%9B%B4%E6%96%B9%E5%9B%BE/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/operators/%E7%89%B9%E5%BE%81%E7%9B%B4%E6%96%B9%E5%9B%BE/</guid>
      <description>借助特征直方图创建select_shape代码 #  前提 #  先使用 connection 算子将图像上的一整个特征目标，拆分成多个特征目标。
使用方式 #   将connection 拆分出来的图像用同一种颜色标注(如用灰色)； 打开特征直方图，勾选area选项； 通过拖拽特征直方图上的绿线和红线，使只关注的目标被标注(着色)； 点击插入代码，即可在代码窗口得到对应的代码。如select_shape (ConnectedRegions, SelectedRegions1, &#39;area&#39;, &#39;and&#39;, 28077.7, 50000)  参考图 #  </description>
    </item>
    
    <item>
      <title>图像分割</title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/</guid>
      <description>图像分割 #  threshold #  直接阈值分割。适用于环境稳定，目标和背景存在明显的灰度差的场合。阈值一般可以通过灰度直方图来确定。
binary_threshold #  自动全局阈值分割。适用于目标物体和背景之间存在明显的灰度差的场合。
在直方图中会有明显的两个波峰：一个是目标物体，另一个是背景。如果有多个波峰，算子通过平滑灰度直方图，自动找到两个波峰之间的最小值，输出灰度值在0到最小值之间的像素点构成暗的区域。
auto_threshold #  多阈值分割。根据多个波峰分割出多个独立的区域。
dyn_threshold #  基于参考图像(由原图进行滤波得到)的动态阈值分割。
var_threshold #  基于结构元素，使用局部均值和标准偏差分析分割图像。
 dyn_threshold 和 var_threshold的适用场合：
1）对于一些应用来说，无法通过一个全局阈值进行分割：图像的背景是非均匀的；
2）物体在局部范围内通常比背景亮些或暗些。
 </description>
    </item>
    
    <item>
      <title>Blob</title>
      <link>http://halcon.lizhenguo.cn/docs/blob/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/blob/</guid>
      <description>Blob #  流程 #   采集图像(1. 本地图像；2.相机接口)(read_image) 图像分割(threshold) 形态学处理(closing_circle, medium_image, erosion, dilation) 连通性分析(region, connection) 填充(fill_up, fill_up_shape) 特征提取(直方图, 检测)(select_shape) 获取结果  描述 #    read_image
读取图片
  threshold
给目标物(如回形针)着色，从背景图中区分出
  closing_circle
给threhold着色时，没有着色的部分补充着色。(根据调整参数，尽可能让需要着色的空洞能着色，不需要着色的部分不会被着色)
  connection:
  ​	将多个目标物(如回形针)组成的一个整体切割成多个(数组)，得到回形针数组
  fill_up_shape
根据自定义的特征进行填充
  select_shape
缩小目标范围，去除不相干内容
  area_center
获取区域的中心点坐标和面积
  dev_desplay
展示指定的图像
  备注 #   图像类型数组，下标从1开始，且只能通过算子(如select_obj)读取  </description>
    </item>
    
    <item>
      <title>异常</title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%BC%82%E5%B8%B8/</guid>
      <description>异常 #  代码格式：
dev_set_check(&#39;give_error&#39;)try//do somethingcatch(Exception)//Exception第0个元素：错误代码，第2个元素：错误描述，第5个元素：产生错误的算子endtry</description>
    </item>
    
    <item>
      <title>几何定位</title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%87%A0%E4%BD%95%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%87%A0%E4%BD%95%E5%AE%9A%E4%BD%8D/</guid>
      <description>几何定位 #  通过几何特征(如模板轮廓)，来判断图像中是否有目标区域。
金字塔等级 #  等级越高，占用内存越少、匹配度要求越低；但等级过高时，会导致匹配出错
极性 #    use_polarity 使用极性，在白色背景中找黑色目标
  ignore_global_polarity 忽略全局极性，可以在白色背景中找黑色目标，也可以在黑色背景中找白色目标
  ignore_local_polarity 忽略局部极性，可以适应更差的环境，可以在背景不稳定，如渐变的情况下找目标
  匹配助手 #   贪心算法，值越大，处理时间越短，但可能会漏匹配部分区域，一般设置在0.7~0.8； 最大重叠，值越大，允许重叠的比例越大，但可能会匹配错； 最大变形，值越大，处理时间越长，但可以尝试匹配的区域越多；  对比度 #  对比度 = 相邻像素点、像素值的差值/距离
建模经验 #   什么是关键轮廓，什么是干扰轮廓； 边缘数量越少越好；边缘数量多了，速度变慢； 边缘越长越好； 干扰边缘越少越好； 关键边缘越长越好，占模板轮廓的比例越多越好； 可以使用PS软件，制造理想的模板图像 灵活运用区域操作技术，获取关键边缘区域；  difference: 特别是回型区域、挖洞大法； union    定位经验 #   频繁调节的参数：角度、缩放、分数、极性； 多次搜索策略(分类)：匹配分数逐步降低；for循环 合理设置旋转角度范围； 合理设置贪婪度：定位要求高，贪婪度越小越好，但时间会边长； 有效提高匹配分数的措施：缩放，会增加时间。（对分数提高效果：异步缩放 &amp;gt; 同步缩放 &amp;gt; 不缩放，要合理设置缩放)。  定位的主要作用 #   最常用：粗定位 -&amp;gt; 仿射变换矩阵(模板轮廓变换矩阵、ROI变换矩阵) -&amp;gt; 模板轮廓跟随、ROI跟随； 异形定位：对定位参数要求高；对于定位准确性、**精确性(edges_sub_pix)**理解要求高； 定位结果是相对值，相对于模板的：  xy： 对于同一个模板图像，每次重新建模，模板中心xy都会变，如果直接使用模板中心，每次都需要调节xy补偿量；如果使用blob或测量进行精定位，则不需要调节； 角度：如果是异形件， 没有办法抓直边或2个以上的mark点，直接使用模板角度(角度精度不是非常高)；如果有办法抓直边或2个以上的mark点，这种方法精度高。    </description>
    </item>
    
    <item>
      <title>相机图像采集</title>
      <link>http://halcon.lizhenguo.cn/docs/%E7%9B%B8%E6%9C%BA%E5%9B%BE%E5%83%8F%E9%87%87%E9%9B%86/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E7%9B%B8%E6%9C%BA%E5%9B%BE%E5%83%8F%E9%87%87%E9%9B%86/</guid>
      <description>相机图像采集 #  最频繁调节的参数 #    曝光，exposure
  增益，gain
  触发， trigger
 注，exposure数值越大，拍照所需时间越长；gain数值越大，图像越亮，噪点越多越明显；trigger分为 硬触发、软触发;
   相机采集代码流程示例 #    关闭相机所有图像采集设备
close_all_framegrabbers()
  打开并配置图像采集设备
open_framegrabber(&amp;lsquo;GigEVision&amp;rsquo;, 0, 0, 0, 0, 0, 0, &amp;lsquo;default&amp;rsquo;, -1, &amp;lsquo;default&amp;rsquo;, -1, &amp;lsquo;false&amp;rsquo;, &amp;lsquo;default&amp;rsquo;, &amp;lsquo;ccd1&amp;rsquo;, 0, -1, AcqHandle)
  设置触发
set_framegrabber_param(AcqHandle, &amp;lsquo;TriggerMode&amp;rsquo;, &amp;lsquo;Off&amp;rsquo;)
  设置快门
set_framegrabber_param(AcqHandle, &amp;lsquo;ExposureTime&amp;rsquo;, 4693.0)
  设置增益
set_framegrabber_param(AcqHandle, &amp;lsquo;Gain&amp;rsquo;, 3.0156)
  采集图像</description>
    </item>
    
    <item>
      <title>图像预处理</title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%9B%BE%E5%83%8F%E9%A2%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%9B%BE%E5%83%8F%E9%A2%84%E5%A4%84%E7%90%86/</guid>
      <description>图像预处理 #     对噪声的处理效果 对边缘的处理效果 效率     平滑滤波 弱化噪声 模糊边缘   中值滤波 去除噪声 保持边缘    滤波 #  针对有噪点的图像进行平滑，可以减弱或消除噪点
 mean_image median_image  锐化 #  对图像边缘进行对比度提升使用，可以让图像轮廓更清晰
 sobel_amp frei_amp  增强 #  emphasize
形态学 #   腐蚀, erosion 膨胀, dilation  骨架 #  skeleton</description>
    </item>
    
    <item>
      <title>硬件</title>
      <link>http://halcon.lizhenguo.cn/docs/%E7%A1%AC%E4%BB%B6/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E7%A1%AC%E4%BB%B6/</guid>
      <description>相机硬件 #    相机靶面尺寸 = 分辨率 * 像元尺寸
  像元越大，成像效果越好
  相机分辨率 * 最大帧率 &amp;lt;= 千兆网带宽
  图像大小 * 相机稳定工作帧率 * 相机数量 &amp;lt;= 千兆网带宽
  千兆网带宽：1000 / 8 = 125M
  帧率 = 1 / 曝光
  相机首选 ，CA, 600万像素；CE, 2000万像素(2000多人民币)；
  </description>
    </item>
    
    <item>
      <title>模板</title>
      <link>http://halcon.lizhenguo.cn/docs/%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E6%A8%A1%E6%9D%BF/</guid>
      <description>创建&amp;amp;保存&amp;amp;读取&amp;amp;使用模板 #  经验 #   金字塔等级(NumLevels)越高，匹配时间越短，但匹配越模糊，容易多匹配； 贪婪度(Greedness)越高，匹配时间越长，匹配越精确； 匹配分数(Score)越高，匹配越精确； 单模板支持x,y同步缩放、异步缩放；多模板不支持缩放。  创建模板 #  dev_get_window (WindowHandle1)dev_set_draw (&#39;margin&#39;) //区域展示样式：边框read_image (Image, &#39;printer_chip/printer_chip_01&#39;)//加载图像draw_rectangle2 (WindowHandle1, Row2, Column, Phi, Length1, Length2)//绘制模板区域gen_rectangle2 (Rectangle, Row2, Column, Phi, Length1, Length2)//展示区域reduce_domain (Image, Rectangle, ImageReduced)//获取图像在区域内的部分内容图像create_shape_model (ImageReduced, &#39;auto&#39;, 0, rad(45), &#39;auto&#39;, &#39;auto&#39;, &#39;use_polarity&#39;, &#39;auto&#39;, &#39;auto&#39;, ModelID)//将区域内的部分图像作为模板内容，制作模板保存模板 #  write_shape_model (ModelID, &#39;C:/Users/lee/Desktop/model.shm&#39;)读取模板 #  read_shape_model (&#39;C:/Users/lee/Desktop/model.shm&#39;, ModelID)使用(查找)模板 #  find_shape_model (Image, ModelID, rad(-45), rad(180), 0.</description>
    </item>
    
    <item>
      <title>常用标定</title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%B8%B8%E7%94%A8%E6%A0%87%E5%AE%9A/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%B8%B8%E7%94%A8%E6%A0%87%E5%AE%9A/</guid>
      <description>常用标定 #   像素变换(圆、矩形、像素单量)； 透视投影及光学畸变校正； 不同坐标系之间的标定(三点确定一个坐标系)：如九点标定(机械手) 多个相机通过标定统一到同一个坐标系  </description>
    </item>
    
    <item>
      <title>仿射变换</title>
      <link>http://halcon.lizhenguo.cn/docs/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2/</guid>
      <description>仿射变换 #  仿射变换可以理解为“跟随”， 即目标物体移动到哪里，相应轮廓、ROI等跟随到哪里。
在基于参考的视觉检测中，由于待检测图像与参考图像或多或少都会存在几何变化(平移、旋转、缩放等)，所以一般都要对待检测图像或ROI进行仿射变换操作。
仿射变换有平移、旋转、缩放、斜切(切变)。
 注，两个坐标系Y轴的旋转角度，叫斜切角。
机器X与Y 轴之间的角度不是绝对的90度，从原点沿着Y轴方向不断移动时，X方向的偏移会越来越大，在求图像坐标系和机器坐标系映射关系时，不能忽略了斜切角的影响。
九点标定可以比较准确的求出斜切角。
 流程 #   mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TDA[&#34;获取特征点坐标，角度 &#34;] -- B[&#34;计算仿射变换矩阵&#34; ]B -- C[&#34;对图像，区域，轮廓进行仿射变换&#34;]三种常见类型 #    根据特征点、角度计算仿射变换矩阵。
如， vector_angle_to_rigid，支持平移、旋转，参数：
   &amp;mdash; 角度 位置(x,y)     对模板轮廓进行变换 0 (0, 0)   对ROI进行变换(包括模板区域) 0 模板区域中心(用area_center获得)    hom_mat2d_scale，支持缩放。
  根据两个以上特征点计算仿射变换矩阵。</description>
    </item>
    
    <item>
      <title>测量</title>
      <link>http://halcon.lizhenguo.cn/docs/%E6%B5%8B%E9%87%8F/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E6%B5%8B%E9%87%8F/</guid>
      <description>测量 #  工业测量的基础——卡尺工具。
卡尺工具过程 #   确定边缘检测方向； 高斯滤波； 执行投影处理； 执行微分（对比度）处理； 设置边缘敏感度（对比度阈值）、边缘极性、边缘的位置； 边缘执行亚像素处理。  一维测量流程 #   mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) graph TDA[&#34;采集图像&#34;] -- B[&#34;创建测量对象&#34; ]B -- C[&#34;测量&#34;]C -- D[&#34;销毁测量对象&#34;] 需要熟练使用的一维测量工具：测量助手
 二维测量流程 #  graph TDA[&#34;采集图像&#34;] -- B[&#34;按顺序创建边缘测量ROI(卡尺工具)&#34; ]B -- C[&#34;边缘测量&#34;]C -- D[&#34;把边缘连接成XLD多边形轮廓&#34;]D -- E[&#34;拟合&#34;] 拟合方法：
 回归线法（无损拟合） 加权法（奇异点进行加权处理，距离XLD越远，权重越小）：huber 抛点法（抛除奇异点）：tukey   </description>
    </item>
    
    <item>
      <title>Halcon描述有错误的算子</title>
      <link>http://halcon.lizhenguo.cn/posts/halcon%E6%8F%8F%E8%BF%B0%E6%9C%89%E9%94%99%E8%AF%AF%E7%9A%84%E7%AE%97%E5%AD%90/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/posts/halcon%E6%8F%8F%E8%BF%B0%E6%9C%89%E9%94%99%E8%AF%AF%E7%9A%84%E7%AE%97%E5%AD%90/</guid>
      <description>1. hom_mat2d_translate #  定义： hom_mat2d_translate( : : HomMat2D, Tx, Ty : HomMat2DTranslate)
错误：Tx, Ty反了，应该是hom_mat2d_translate( : : HomMat2D, Ty, Tx : HomMat2DTranslate)
2. affine_trans_point_2d #  定义：affine_trans_point_2d( : : HomMat2D, Px, Py : Qx, Qy)
错误：Px, Py反了，Qx, Qy反了，应该是affine_trans_point_2d( : : HomMat2D, Py, Px : Qy, Qx)	
综上，Halcon算子中，总是先用y坐标(Row)， 再用x坐标(Column)</description>
    </item>
    
    <item>
      <title>Halcon算子文档</title>
      <link>http://halcon.lizhenguo.cn/posts/halcon%E7%AE%97%E5%AD%90%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/posts/halcon%E7%AE%97%E5%AD%90%E6%96%87%E6%A1%A3/</guid>
      <description>每个算子的定义，都是由三个 冒号 : 分割的4组参数，分别表示 图形输入参数 : 图形输出参数：控制变量输入参数：控制变量输出参数</description>
    </item>
    
    <item>
      <title>System.InvalidOperationException:线程间操作无效: 从不是创建控件 ** 的线程访问它。</title>
      <link>http://halcon.lizhenguo.cn/posts/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/posts/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/</guid>
      <description>在使用Thread 多线程时，线程间不能跨线程访问其他线程的控件。
如，主线程创建了某个label控件，子线程不能直接访问该控件，若想访问，则可以在Form窗体初始化函数中设置CheckForIllegalCrossThreadCalls = false， 否则会报以下类似的错误：&amp;quot;System.InvalidOperationException:线程间操作无效: 从不是创建控件 ** 的线程访问它。&amp;quot;
MSDN参考连接</description>
    </item>
    
    <item>
      <title>画直线</title>
      <link>http://halcon.lizhenguo.cn/docs/examples/custom/%E7%94%BB%E7%9B%B4%E7%BA%BF/</link>
      <pubDate>Sun, 03 Jan 2021 15:01:33 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/examples/custom/%E7%94%BB%E7%9B%B4%E7%BA%BF/</guid>
      <description>函数名 #  custom_gen_line(:Line:Row, Col, Angle, Length, RegionOrXld:)
 注释，
输出参数，Line
输入参数，
Row: 起始点Y坐标；Col: 七十点X坐标；Angle: 角度；Length: 直线的长度；RegionOrXld: 结果类型，可选值有region, xld
 函数体 #  dev_update_off () if(Length &amp;lt; 1) return () endif if(RegionOrXld == &#39;region&#39;) gen_region_line (LineTemp, 0, 0, 0, Length-1) else gen_contour_polygon_xld (LineTemp, [0,0], [0, Length-1]) endif * 求仿射变换矩阵 vector_angle_to_rigid (0,0,0, Row, Col, Angle, HomMat2D) if(RegionOrXld == &#39;region&#39;) affine_trans_region (LineTemp, Line, HomMat2D, &#39;false&#39;) else affine_trans_contour_xld (LineTemp, Line, HomMat2D) endif dev_update_on () return () 调用 #  read_image (Image, &#39;fabrik&#39;) custom_gen_line (Line, 100, 100, rad(-45), 100, &#39;region&#39;) custom_gen_line (Line1, 200, 200, rad(-45), 100, &#39;xld&#39;) 示例下载</description>
    </item>
    
    <item>
      <title>裁剪图像</title>
      <link>http://halcon.lizhenguo.cn/docs/examples/%E8%A3%81%E5%89%AA%E5%9B%BE%E5%83%8F/</link>
      <pubDate>Sun, 03 Jan 2021 14:30:27 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/examples/%E8%A3%81%E5%89%AA%E5%9B%BE%E5%83%8F/</guid>
      <description>read_image (Image1, &#39;fabrik&#39;) gen_rectangle1 (Region, 181,288,305,350)//产生区域 reduce_domain (Image1, Region, ImageReduced)//减少定义域 crop_domain (ImageReduced, ImagePart)//裁剪图像 </description>
    </item>
    
    <item>
      <title>图像二值化</title>
      <link>http://halcon.lizhenguo.cn/docs/examples/%E5%9B%BE%E5%83%8F%E4%BA%8C%E5%80%BC%E5%8C%96/</link>
      <pubDate>Sun, 03 Jan 2021 14:26:12 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/examples/%E5%9B%BE%E5%83%8F%E4%BA%8C%E5%80%BC%E5%8C%96/</guid>
      <description>*生成二值化图像 *方法一，region_to_bin read_image (Image, &#39;fabrik&#39;) threshold (Image, Region, 170, 255) get_image_size (Image, Width, Height) region_to_bin (Region, BinImage, 255, 0, Width, Height) //根据区域产生二值化图像 stop() * 方法二，paint_region read_image (Image, &#39;fabrik&#39;) gen_rectangle1 (Rectangle, 181,288,305,350)//产生区域 paint_region (Rectangle, Image, ImageResult, 255, &#39;fill&#39;)//把区域绘制为灰度值255 complement (Rectangle, RegionComplement)//获取区域的补集 paint_region (RegionComplement, ImageResult, BinImage, 0, &#39;fill&#39;) stop() </description>
    </item>
    
    <item>
      <title>图形类型数组VS控制类型数组</title>
      <link>http://halcon.lizhenguo.cn/posts/%E5%9B%BE%E5%BD%A2%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84vs%E6%8E%A7%E5%88%B6%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/posts/%E5%9B%BE%E5%BD%A2%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84vs%E6%8E%A7%E5%88%B6%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84/</guid>
      <description>  图像类型数组，下标从1开始，且只能通过算子(select_obj)一个个读取；
  控制类型数组，下标从0开始，可以通过数字下标 Arr[index] 形式来读取。
  </description>
    </item>
    
    <item>
      <title>几何定位&amp;Blob分析</title>
      <link>http://halcon.lizhenguo.cn/posts/%E5%87%A0%E4%BD%95%E5%AE%9A%E4%BD%8Dblob%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 02 Jan 2021 01:25:15 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/posts/%E5%87%A0%E4%BD%95%E5%AE%9A%E4%BD%8Dblob%E5%88%86%E6%9E%90/</guid>
      <description>都是“判定有无” （判断图像中是否存在目标区域）的方法。
  几何定位是通过(模板)轮廓等几何特征匹配，来判断图像中是否存在目标区域；
  Blob分析是通过灰度值、特征值(如面积)等方式筛选，来判断图像中是否存在目标区域。
  灰度定位(Blob)与几何(轮廓)定位对比:
      对非线性光照变化，对物体灰度非线性变化的适应性 对缩放的适应性 对旋转的适应性 对物体遮挡、缺失的适应性 时间     灰度定位 差 差 差 差 短   几何(轮廓)定位 好 好 好 好 长    </description>
    </item>
    
    <item>
      <title>list_files</title>
      <link>http://halcon.lizhenguo.cn/docs/image/operators/list_files/</link>
      <pubDate>Thu, 24 Dec 2020 22:59:03 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/operators/list_files/</guid>
      <description>列举文件 #  </description>
    </item>
    
    <item>
      <title>orientation</title>
      <link>http://halcon.lizhenguo.cn/docs/image/operators/orientation/</link>
      <pubDate>Thu, 24 Dec 2020 22:59:03 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/operators/orientation/</guid>
      <description>orientation #  </description>
    </item>
    
    <item>
      <title>select_shape</title>
      <link>http://halcon.lizhenguo.cn/docs/image/operators/select_shape/</link>
      <pubDate>Thu, 24 Dec 2020 22:59:03 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/operators/select_shape/</guid>
      <description>select_shape #  </description>
    </item>
    
    <item>
      <title>Windows下的快捷键</title>
      <link>http://halcon.lizhenguo.cn/posts/hotkeys/</link>
      <pubDate>Thu, 24 Dec 2020 22:32:06 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/posts/hotkeys/</guid>
      <description>快捷键 #   F2: 重置程序执行，停止执行程序，清零所有变量； F3: 取消注释所在行； F4: 注释所在行； F5: 运行程序(遇到断点会暂停)； F6: 单步步过执行(不进入自定义函数内部)； F7: 单步步入执行，会进入自定义函数内部(内置函数除外)； F8: 步过执行完成当前函数，到前一个函数后面； F9: 停止执行； F10: 给当前行加断点。 使用灰度直方图时，按ctrl键，鼠标放在图像上可以到看灰度值。  </description>
    </item>
    
    <item>
      <title>使用相对路径加载图像</title>
      <link>http://halcon.lizhenguo.cn/posts/relative_path/</link>
      <pubDate>Thu, 24 Dec 2020 22:32:06 +0800</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/posts/relative_path/</guid>
      <description>好处 #  共享程序文件给他人时，不用严格按照原有的绝对路径存储图像，方便使用。
位置 #  read_image可以将hdev文件所在目录，作为相对路径起始位置。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://halcon.lizhenguo.cn/docs/3d%E6%B5%8B%E9%87%8F/%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/3d%E6%B5%8B%E9%87%8F/%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/</guid>
      <description>关键技术 #  3D测量适合测高度，X、Y方向的精度不高
线激光和相机的角度 #  一般在10~60度，角度越大，精度越高。。。
场合 #  拍摄反光较强的表面时，相机、激光都要与拍摄物有一定角度。
Z方向分辨率 #  Z方向的分辨率 = X方向分辨率 * 常量(夹角决定)
简易算法： Z方向像素j单量 = Height / Width (Height:用于测量的矩形块高度， Width:视场长度)
Z方向重复性 #  一体式相机： Z方向重复性 = X方向像素单量 * 系数 （系数在0.5 ~ 2 之间，初次选型，可采用参考值1.5）
分体式相机：Z方向重复性 = X方向像素单量 / tanα * 系数(1-3) ， 角度参考值为45°(此时tanα = 1)
Z方向像素单量 = X方向像素单量 / tanα
Y方向 #  线激光传感器在机器人手臂上时，是时间频率拍照，没法触发拍照。
扫描间隔/触发间隔 #  扫描间隔(距离, 单位mm) = 扫描(脉冲)间隔 * 脉冲单量</description>
    </item>
    
    <item>
      <title></title>
      <link>http://halcon.lizhenguo.cn/docs/3d%E6%B5%8B%E9%87%8F/%E5%9F%BA%E7%A1%80%E6%B5%8B%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/3d%E6%B5%8B%E9%87%8F/%E5%9F%BA%E7%A1%80%E6%B5%8B%E9%87%8F/</guid>
      <description>基础测量 #  准备工作 #    调整相机的帧率、曝光时间、增益、ROI等参数，使实际帧率达到200以上；
  调整相机轴臂移动速度、触发模式(开)，使的X轴每移动指定距离(如5mm)时，相机的拍照图像张数基本固定(多次测量前后数量相差3张以内)。
  X方向分辨率(像素单量) #  指的是X轴方向，每个像素代表的实际距离(一般单位是mm，或um)
测量方法 #   用相机拍摄一段尺子(如10mm)； 在Halcon中使用测量助手 打开照片； 通过画直线，调整最小边缘幅度、平滑等参数，得出图像中某一长度(如10mm)对应的像素个数； X方向分辨率 = 物理距离 / 像素个数，单位 mm/pixel  Y方向分辨率(像素单量) #  指的是Y轴方向，每个像素代表的实际距离(一般单位是mm，或um)
测量方法 #   相机开启触发模式； 让相机轴臂低速(保证帧率)移动指定距离(如5mm)，记录照片张数； Y方向分辨率 = 移动距离 / 照片张数，单位 mm/pixel  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://halcon.lizhenguo.cn/docs/image/operators/%E7%81%B0%E5%BA%A6%E7%9B%B4%E6%96%B9%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/image/operators/%E7%81%B0%E5%BA%A6%E7%9B%B4%E6%96%B9%E5%9B%BE/</guid>
      <description>借助灰度直方图创建threshold代码 #  发音：ˈθreʃhəʊld
阈值 (不是_阀值_)又叫临界值，是指一个效应能够产生的最低值或最高值。此一名词广泛用于各方面，包括建筑学、生物学、飞行、化学、电信、电学、心理学等，如生态阈值。（摘自百度百科）
前提 #  需要将通过read_image读取图像得到的Image类型变量作为参数。
使用方式 #   通过read_image 读取图像； 打开灰度直方图，并勾选 阈值选项； 调整绿线和红线，勾勒出目标物； 点击插入代码。  提醒 #  若无法勾选阈值选项，看下阈值行的通道 是不是RGB，若是，选择某一具体值，这时阈值选项即可勾选了。
参考图 #  使用代码获取灰度直方图 #  * 读取图像read_image(Image, &#39;clip&#39;)* 产生直方图gray_histo (Image, Image, AbsoluteHisto, RelativeHisto)* 产生直方图区域gen_region_histo (Region, AbsoluteHisto, 255, 255, 1)* 根据直方图求分割阈值histo_to_thresh (AbsoluteHisto, 2, MinThresh, MaxThresh)* 阈值分割threshold (Image, Region1, MinThresh, MaxThresh)</description>
    </item>
    
    <item>
      <title></title>
      <link>http://halcon.lizhenguo.cn/docs/%E5%BD%A2%E6%80%81%E5%AD%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E5%BD%A2%E6%80%81%E5%AD%A6/</guid>
      <description>形态学 #   腐蚀 (erosion1, erosion_rectangle1, erosion_circle) 膨胀(dilation1, dilation_rectangle1, dilation_circle) 开运算(opening_*) 闭运算(closing_*)  描述 #   腐蚀：去除毛刺 开运算：先腐蚀再膨胀，作用是去除毛刺的同时，减少面积的丢失。  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://halcon.lizhenguo.cn/docs/%E7%A1%AC%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/docs/%E7%A1%AC%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>基础知识 #  拖影 #  拖影由运动速度和曝光时间影响导致，速度越快，或曝光时间越长，拖影越明显。
如何拍照，使照片教亮？ #   光源亮度调大 适当调大增益（但增益越大，噪点越多） 光圈调大（进入的光线会变多） 延长曝光时间（但会出现拖影）  相机电压 #  通用12V
相机保护 #  相机信号输出时，加光耦保护
使用触发的好处 #  占用带宽少。（触发方式常用 edge方式）</description>
    </item>
    
    <item>
      <title></title>
      <link>http://halcon.lizhenguo.cn/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://halcon.lizhenguo.cn/readme/</guid>
      <description>halcon_content #  文章内容, markdown格式</description>
    </item>
    
  </channel>
</rss>
